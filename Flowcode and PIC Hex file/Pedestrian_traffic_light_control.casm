;/////////////////////////////////////////////////////////////////////////////////
;// Code Generator: BoostC Compiler - http://www.sourceboost.com
;// Version       : 7.03
;// License Type  : Pro License
;// Limitations   : PIC12,PIC16 max code size:Unlimited, max RAM banks:Unlimited
;/////////////////////////////////////////////////////////////////////////////////

//************************************************************************************
//**  
//**  File name:     D:\MCU_projects\Flowcode\Pedestrian_traffic_light_control.c
//**  Title:         
//**  Description:   
//**  
//**  Generated by:  Flowcode v5.2.0.0
//**  Date:          Sunday, December 09, 2018 11:42:21
//**  Licence:       Professional
//**  Registered to: uzo_ochogu
//**  Licence key:   7CJZMH
//**  
//**  
//**  http://www.matrixmultimedia.com
//**  
//************************************************************************************


#define MX_PIC

#define MX_USES_UINT8 1
#define MX_USES_SINT16 0
#define MX_USES_CHAR 0
#define MX_USES_FLOAT 0
#define MX_USES_SINT32 0
#define MX_USES_BOOL 1
#define MX_USES_UINT16 0
#define MX_USES_UINT32 0
//Defines for microcontroller
#define P16F877A
#define FC_CAL_PIC
#define MX_ADC
#define MX_ADC_TYPE_1
#define MX_ADC_BITS_10
#define MX_EE
#define MX_EE_TYPE2
#define MX_EE_SIZE 256
#define MX_SPI_1
#define MX_SPI_1_MISO_PORT portc
#define MX_SPI_1_MISO_TRIS trisc
#define MX_SPI_1_MISO_PIN 4
#define MX_SPI_1_MOSI_PORT portc
#define MX_SPI_1_MOSI_TRIS trisc
#define MX_SPI_1_MOSI_PIN 5
#define MX_SPI_1_CLK_PORT portc
#define MX_SPI_1_CLK_TRIS trisc
#define MX_SPI_1_CLK_PIN 3
#define MX_SPI_1_SS_PORT portc
#define MX_SPI_1_SS_TRIS trisc
#define MX_UART_1
#define MX_UART_1_TX_PORT portc
#define MX_UART_1_TX_TRIS trisc
#define MX_UART_1_TX_PIN 6
#define MX_UART_1_RX_PORT portc
#define MX_UART_1_RX_TRIS trisc
#define MX_UART_1_RX_PIN 7
#define MX_I2C
#define MX_MI2C
#define MX_I2C_1
#define MX_I2C_1_SDA_PORT portc
#define MX_I2C_1_SDA_TRIS trisc
#define MX_I2C_1_SDA_PIN 4
#define MX_I2C_1_SCL_PORT portc
#define MX_I2C_1_SCL_TRIS trisc
#define MX_I2C_1_SCL_PIN 3
#define MX_PWM
#define MX_PWM_CNT 2
#define MX_PWM_PSCA1
#define MX_PWM_PSCA4
#define MX_PWM_PSCA16
#define MX_PWM_1_PORT portc
#define MX_PWM_1_TRIS trisc
#define MX_PWM_1_PIN 2
#define MX_PWM_2_PORT portc
#define MX_PWM_2_TRIS trisc
#define MX_PWM_2_PIN 1

//Functions
#define MX_CLK_SPEED 19660800
#ifdef _BOOSTC
#include <system.h>
#endif
#ifdef HI_TECH_C
#include <pic.h>
#endif

//Configuration data
#ifdef _BOOSTC
#pragma DATA 0x2007, 0x3f72
#endif
#ifdef HI_TECH_C
__CONFIG(0x3f72);
#endif

//Internal functions
#include "C:\Program Files\Flowcode\v5\FCD\internals.c"

//Macro function declarations
void FCM_safety();
void FCM_vehicles_moving();
void FCM_pedestrian_crossing();


//Variable declarations
#define FCV_FALSE (0)
#define FCV_TRUE (1)
MX_UINT8 FCV_COUNTER = (0x0);
01EB  01C2  	CLRF gbl_FCV_COUNTER

MX_BOOL FCV_SWITCH2_STATE = (0);
01EC  1043  	BCF gbl_FCV_SWITCH2_STATE,0

MX_BOOL FCV_SWITCH_STATE = (0);
01ED  10C3  	BCF gbl_FCV_SWITCH_STATE,1





//LED(0): //Defines:

/**** Macro Substitutions ****
a = Unique Reference
b = LED Port Letter
c = LED Pin Number
d = LED Active Polarity
******************************/

#define LED_3__LED_PORT		portb
#define LED_3__LED_TRIS		trisb
#define LED_3__LED_PIN		0
#define LED_3__LED_POLE		1




//LED(0): //Macro function declarations

void FCD_LED0_LEDOn();
void FCD_LED0_LEDOff();


//LED(1): //Defines:

/**** Macro Substitutions ****
a = Unique Reference
b = LED Port Letter
c = LED Pin Number
d = LED Active Polarity
******************************/

#define LED_4__LED_PORT		portb
#define LED_4__LED_TRIS		trisb
#define LED_4__LED_PIN		1
#define LED_4__LED_POLE		1




//LED(1): //Macro function declarations

void FCD_LED1_LEDOn();
void FCD_LED1_LEDOff();


//LED(2): //Defines:

/**** Macro Substitutions ****
a = Unique Reference
b = LED Port Letter
c = LED Pin Number
d = LED Active Polarity
******************************/

#define LED_5__LED_PORT		portb
#define LED_5__LED_TRIS		trisb
#define LED_5__LED_PIN		2
#define LED_5__LED_POLE		1




//LED(2): //Macro function declarations

void FCD_LED2_LEDOn();
void FCD_LED2_LEDOff();


//LED(3): //Defines:

/**** Macro Substitutions ****
a = Unique Reference
b = LED Port Letter
c = LED Pin Number
d = LED Active Polarity
******************************/

#define LED_6__LED_PORT		portb
#define LED_6__LED_TRIS		trisb
#define LED_6__LED_PIN		3
#define LED_6__LED_POLE		1




//LED(3): //Macro function declarations

void FCD_LED3_LEDOn();
void FCD_LED3_LEDOff();


//LED(4): //Defines:

/**** Macro Substitutions ****
a = Unique Reference
b = LED Port Letter
c = LED Pin Number
d = LED Active Polarity
******************************/

#define LED_7__LED_PORT		portb
#define LED_7__LED_TRIS		trisb
#define LED_7__LED_PIN		4
#define LED_7__LED_POLE		1




//LED(4): //Macro function declarations

void FCD_LED4_LEDOn();
void FCD_LED4_LEDOff();


//LED(5): //Defines:

/**** Macro Substitutions ****
a = Unique Reference
b = LED Port Letter
c = LED Pin Number
d = LED Active Polarity
******************************/

#define LED_8__LED_PORT		portb
#define LED_8__LED_TRIS		trisb
#define LED_8__LED_PIN		5
#define LED_8__LED_POLE		1




//LED(5): //Macro function declarations

void FCD_LED5_LEDOn();
void FCD_LED5_LEDOff();


//LED(6): //Defines:

/**** Macro Substitutions ****
a = Unique Reference
b = LED Port Letter
c = LED Pin Number
d = LED Active Polarity
******************************/

#define LED_9__LED_PORT		portb
#define LED_9__LED_TRIS		trisb
#define LED_9__LED_PIN		6
#define LED_9__LED_POLE		1




//LED(6): //Macro function declarations

void FCD_LED6_LEDOn();
void FCD_LED6_LEDOff();


//LED(7): //Defines:

/**** Macro Substitutions ****
a = Unique Reference
b = LED Port Letter
c = LED Pin Number
d = LED Active Polarity
******************************/

#define LED_10__LED_PORT		portb
#define LED_10__LED_TRIS		trisb
#define LED_10__LED_PIN		7
#define LED_10__LED_POLE		1




//LED(7): //Macro function declarations

void FCD_LED7_LEDOn();
void FCD_LED7_LEDOff();


//LED(8): //Defines:

/**** Macro Substitutions ****
a = Unique Reference
b = LED Port Letter
c = LED Pin Number
d = LED Active Polarity
******************************/

#define LED_11__LED_PORT		portc
#define LED_11__LED_TRIS		trisc
#define LED_11__LED_PIN		0
#define LED_11__LED_POLE		1




//LED(8): //Macro function declarations

void FCD_LED8_LEDOn();
void FCD_LED8_LEDOff();


//LED(9): //Defines:

/**** Macro Substitutions ****
a = Unique Reference
b = LED Port Letter
c = LED Pin Number
d = LED Active Polarity
******************************/

#define LED_12__LED_PORT		portc
#define LED_12__LED_TRIS		trisc
#define LED_12__LED_PIN		1
#define LED_12__LED_POLE		1




//LED(9): //Macro function declarations

void FCD_LED9_LEDOn();
void FCD_LED9_LEDOff();


//led7seg(0): //Defines:

/**** Macro Substitutions ****
a = Unique Reference
b = Segment Port letter
c = Common Port letter
d = Segment Pin 0
e = Segment Pin 1
f = Segment Pin 2
g = Segment Pin 3
h = Segment Pin 4
i = Segment Pin 5
j = Segment Pin 6
k = Segment Pin 7
l = Common Pin
m = Display Type 0=Common Cathode, 1=Common Anode
******************************/

#define SEVENSEG1_19_SEG_PORT		portd
#define SEVENSEG1_19_SEG_TRIS		trisd
#define SEVENSEG1_19_COM_PORT		portc
#define SEVENSEG1_19_COM_TRIS		trisc
#define SEVENSEG1_19_SEG_PIN0		0
#define SEVENSEG1_19_SEG_PIN1		1
#define SEVENSEG1_19_SEG_PIN2		2
#define SEVENSEG1_19_SEG_PIN3		3
#define SEVENSEG1_19_SEG_PIN4		4
#define SEVENSEG1_19_SEG_PIN5		5
#define SEVENSEG1_19_SEG_PIN6		6
#define SEVENSEG1_19_SEG_PIN7		7
#define SEVENSEG1_19_COM_PIN		2
#define SEVENSEG1_19_COM_TYPE		1

#ifndef SEVENSEG1_19_ARRAY
 #define SEVENSEG1_19_ARRAY
 ROMARRAY_S SEVENSEG1_19_SegmentArray ROMARRAY_E = {192, 249, 164, 176, 153, 146, 130, 248, 128, 152};		//Create ROM pattern array for the display
01EE  3000  	MOVLW 0x00
01EF  00C4  	MOVWF gbl_SEVENSEG1_19_SegmentArray

#endif




//led7seg(0): //Macro function declarations

void FCD_led7seg0_ShowDigit(MX_UINT8 Value, MX_UINT8 DecimalPoint);
void FCD_led7seg0_ClearDigit();



//LED(0): //Macro implementations


void FCD_LED0_LEDOn()

{
	
		#if( LED_3__LED_POLE == 1)									//Active high polarity
			FC_CAL_Bit_High_DDR( LED_3__LED_PORT , LED_3__LED_TRIS , LED_3__LED_PIN );
00DA  1683  	BSF STATUS, RP0
00DB  1303  	BCF STATUS, RP1
00DC  1006  	BCF gbl_trisb,0
00DD  1283  	BCF STATUS, RP0
00DE  1406  	BSF gbl_portb,0

		#else													//Active low polarity
			FC_CAL_Bit_Low_DDR( LED_3__LED_PORT , LED_3__LED_TRIS , LED_3__LED_PIN );
		#endif

}
00DF  0008  	RETURN


void FCD_LED0_LEDOff()

{
	
		#if( LED_3__LED_POLE == 1)									//Active high polarity
			FC_CAL_Bit_Low_DDR( LED_3__LED_PORT	, LED_3__LED_TRIS , LED_3__LED_PIN );
00E0  1683  	BSF STATUS, RP0
00E1  1303  	BCF STATUS, RP1
00E2  1006  	BCF gbl_trisb,0
00E3  1283  	BCF STATUS, RP0
00E4  1006  	BCF gbl_portb,0

		#else													//Active low polarity
			FC_CAL_Bit_High_DDR( LED_3__LED_PORT , LED_3__LED_TRIS , LED_3__LED_PIN );
		#endif

}
00E5  0008  	RETURN




//LED(1): //Macro implementations


void FCD_LED1_LEDOn()

{
	
		#if( LED_4__LED_POLE == 1)									//Active high polarity
			FC_CAL_Bit_High_DDR( LED_4__LED_PORT , LED_4__LED_TRIS , LED_4__LED_PIN );
00D4  1683  	BSF STATUS, RP0
00D5  1303  	BCF STATUS, RP1
00D6  1086  	BCF gbl_trisb,1
00D7  1283  	BCF STATUS, RP0
00D8  1486  	BSF gbl_portb,1

		#else													//Active low polarity
			FC_CAL_Bit_Low_DDR( LED_4__LED_PORT , LED_4__LED_TRIS , LED_4__LED_PIN );
		#endif

}
00D9  0008  	RETURN


void FCD_LED1_LEDOff()

{
	
		#if( LED_4__LED_POLE == 1)									//Active high polarity
			FC_CAL_Bit_Low_DDR( LED_4__LED_PORT	, LED_4__LED_TRIS , LED_4__LED_PIN );
00CE  1683  	BSF STATUS, RP0
00CF  1303  	BCF STATUS, RP1
00D0  1086  	BCF gbl_trisb,1
00D1  1283  	BCF STATUS, RP0
00D2  1086  	BCF gbl_portb,1

		#else													//Active low polarity
			FC_CAL_Bit_High_DDR( LED_4__LED_PORT , LED_4__LED_TRIS , LED_4__LED_PIN );
		#endif

}
00D3  0008  	RETURN




//LED(2): //Macro implementations


void FCD_LED2_LEDOn()

{
	
		#if( LED_5__LED_POLE == 1)									//Active high polarity
			FC_CAL_Bit_High_DDR( LED_5__LED_PORT , LED_5__LED_TRIS , LED_5__LED_PIN );
00C2  1683  	BSF STATUS, RP0
00C3  1303  	BCF STATUS, RP1
00C4  1106  	BCF gbl_trisb,2
00C5  1283  	BCF STATUS, RP0
00C6  1506  	BSF gbl_portb,2

		#else													//Active low polarity
			FC_CAL_Bit_Low_DDR( LED_5__LED_PORT , LED_5__LED_TRIS , LED_5__LED_PIN );
		#endif

}
00C7  0008  	RETURN


void FCD_LED2_LEDOff()

{
	
		#if( LED_5__LED_POLE == 1)									//Active high polarity
			FC_CAL_Bit_Low_DDR( LED_5__LED_PORT	, LED_5__LED_TRIS , LED_5__LED_PIN );
00C8  1683  	BSF STATUS, RP0
00C9  1303  	BCF STATUS, RP1
00CA  1106  	BCF gbl_trisb,2
00CB  1283  	BCF STATUS, RP0
00CC  1106  	BCF gbl_portb,2

		#else													//Active low polarity
			FC_CAL_Bit_High_DDR( LED_5__LED_PORT , LED_5__LED_TRIS , LED_5__LED_PIN );
		#endif

}
00CD  0008  	RETURN




//LED(3): //Macro implementations


void FCD_LED3_LEDOn()

{
	
		#if( LED_6__LED_POLE == 1)									//Active high polarity
			FC_CAL_Bit_High_DDR( LED_6__LED_PORT , LED_6__LED_TRIS , LED_6__LED_PIN );
00BC  1683  	BSF STATUS, RP0
00BD  1303  	BCF STATUS, RP1
00BE  1186  	BCF gbl_trisb,3
00BF  1283  	BCF STATUS, RP0
00C0  1586  	BSF gbl_portb,3

		#else													//Active low polarity
			FC_CAL_Bit_Low_DDR( LED_6__LED_PORT , LED_6__LED_TRIS , LED_6__LED_PIN );
		#endif

}
00C1  0008  	RETURN


void FCD_LED3_LEDOff()

{
	
		#if( LED_6__LED_POLE == 1)									//Active high polarity
			FC_CAL_Bit_Low_DDR( LED_6__LED_PORT	, LED_6__LED_TRIS , LED_6__LED_PIN );
00B6  1683  	BSF STATUS, RP0
00B7  1303  	BCF STATUS, RP1
00B8  1186  	BCF gbl_trisb,3
00B9  1283  	BCF STATUS, RP0
00BA  1186  	BCF gbl_portb,3

		#else													//Active low polarity
			FC_CAL_Bit_High_DDR( LED_6__LED_PORT , LED_6__LED_TRIS , LED_6__LED_PIN );
		#endif

}
00BB  0008  	RETURN




//LED(4): //Macro implementations


void FCD_LED4_LEDOn()

{
	
		#if( LED_7__LED_POLE == 1)									//Active high polarity
			FC_CAL_Bit_High_DDR( LED_7__LED_PORT , LED_7__LED_TRIS , LED_7__LED_PIN );
00AA  1683  	BSF STATUS, RP0
00AB  1303  	BCF STATUS, RP1
00AC  1206  	BCF gbl_trisb,4
00AD  1283  	BCF STATUS, RP0
00AE  1606  	BSF gbl_portb,4

		#else													//Active low polarity
			FC_CAL_Bit_Low_DDR( LED_7__LED_PORT , LED_7__LED_TRIS , LED_7__LED_PIN );
		#endif

}
00AF  0008  	RETURN


void FCD_LED4_LEDOff()

{
	
		#if( LED_7__LED_POLE == 1)									//Active high polarity
			FC_CAL_Bit_Low_DDR( LED_7__LED_PORT	, LED_7__LED_TRIS , LED_7__LED_PIN );
00B0  1683  	BSF STATUS, RP0
00B1  1303  	BCF STATUS, RP1
00B2  1206  	BCF gbl_trisb,4
00B3  1283  	BCF STATUS, RP0
00B4  1206  	BCF gbl_portb,4

		#else													//Active low polarity
			FC_CAL_Bit_High_DDR( LED_7__LED_PORT , LED_7__LED_TRIS , LED_7__LED_PIN );
		#endif

}
00B5  0008  	RETURN




//LED(5): //Macro implementations


void FCD_LED5_LEDOn()

{
	
		#if( LED_8__LED_POLE == 1)									//Active high polarity
			FC_CAL_Bit_High_DDR( LED_8__LED_PORT , LED_8__LED_TRIS , LED_8__LED_PIN );
00A4  1683  	BSF STATUS, RP0
00A5  1303  	BCF STATUS, RP1
00A6  1286  	BCF gbl_trisb,5
00A7  1283  	BCF STATUS, RP0
00A8  1686  	BSF gbl_portb,5

		#else													//Active low polarity
			FC_CAL_Bit_Low_DDR( LED_8__LED_PORT , LED_8__LED_TRIS , LED_8__LED_PIN );
		#endif

}
00A9  0008  	RETURN


void FCD_LED5_LEDOff()

{
	
		#if( LED_8__LED_POLE == 1)									//Active high polarity
			FC_CAL_Bit_Low_DDR( LED_8__LED_PORT	, LED_8__LED_TRIS , LED_8__LED_PIN );
009E  1683  	BSF STATUS, RP0
009F  1303  	BCF STATUS, RP1
00A0  1286  	BCF gbl_trisb,5
00A1  1283  	BCF STATUS, RP0
00A2  1286  	BCF gbl_portb,5

		#else													//Active low polarity
			FC_CAL_Bit_High_DDR( LED_8__LED_PORT , LED_8__LED_TRIS , LED_8__LED_PIN );
		#endif

}
00A3  0008  	RETURN




//LED(6): //Macro implementations


void FCD_LED6_LEDOn()

{
	
		#if( LED_9__LED_POLE == 1)									//Active high polarity
			FC_CAL_Bit_High_DDR( LED_9__LED_PORT , LED_9__LED_TRIS , LED_9__LED_PIN );
0092  1683  	BSF STATUS, RP0
0093  1303  	BCF STATUS, RP1
0094  1306  	BCF gbl_trisb,6
0095  1283  	BCF STATUS, RP0
0096  1706  	BSF gbl_portb,6

		#else													//Active low polarity
			FC_CAL_Bit_Low_DDR( LED_9__LED_PORT , LED_9__LED_TRIS , LED_9__LED_PIN );
		#endif

}
0097  0008  	RETURN


void FCD_LED6_LEDOff()

{
	
		#if( LED_9__LED_POLE == 1)									//Active high polarity
			FC_CAL_Bit_Low_DDR( LED_9__LED_PORT	, LED_9__LED_TRIS , LED_9__LED_PIN );
0098  1683  	BSF STATUS, RP0
0099  1303  	BCF STATUS, RP1
009A  1306  	BCF gbl_trisb,6
009B  1283  	BCF STATUS, RP0
009C  1306  	BCF gbl_portb,6

		#else													//Active low polarity
			FC_CAL_Bit_High_DDR( LED_9__LED_PORT , LED_9__LED_TRIS , LED_9__LED_PIN );
		#endif

}
009D  0008  	RETURN




//LED(7): //Macro implementations


void FCD_LED7_LEDOn()

{
	
		#if( LED_10__LED_POLE == 1)									//Active high polarity
			FC_CAL_Bit_High_DDR( LED_10__LED_PORT , LED_10__LED_TRIS , LED_10__LED_PIN );
0086  1683  	BSF STATUS, RP0
0087  1303  	BCF STATUS, RP1
0088  1386  	BCF gbl_trisb,7
0089  1283  	BCF STATUS, RP0
008A  1786  	BSF gbl_portb,7

		#else													//Active low polarity
			FC_CAL_Bit_Low_DDR( LED_10__LED_PORT , LED_10__LED_TRIS , LED_10__LED_PIN );
		#endif

}
008B  0008  	RETURN


void FCD_LED7_LEDOff()

{
	
		#if( LED_10__LED_POLE == 1)									//Active high polarity
			FC_CAL_Bit_Low_DDR( LED_10__LED_PORT	, LED_10__LED_TRIS , LED_10__LED_PIN );
008C  1683  	BSF STATUS, RP0
008D  1303  	BCF STATUS, RP1
008E  1386  	BCF gbl_trisb,7
008F  1283  	BCF STATUS, RP0
0090  1386  	BCF gbl_portb,7

		#else													//Active low polarity
			FC_CAL_Bit_High_DDR( LED_10__LED_PORT , LED_10__LED_TRIS , LED_10__LED_PIN );
		#endif

}
0091  0008  	RETURN




//LED(8): //Macro implementations


void FCD_LED8_LEDOn()

{
	
		#if( LED_11__LED_POLE == 1)									//Active high polarity
			FC_CAL_Bit_High_DDR( LED_11__LED_PORT , LED_11__LED_TRIS , LED_11__LED_PIN );
0080  1683  	BSF STATUS, RP0
0081  1303  	BCF STATUS, RP1
0082  1007  	BCF gbl_trisc,0
0083  1283  	BCF STATUS, RP0
0084  1407  	BSF gbl_portc,0

		#else													//Active low polarity
			FC_CAL_Bit_Low_DDR( LED_11__LED_PORT , LED_11__LED_TRIS , LED_11__LED_PIN );
		#endif

}
0085  0008  	RETURN


void FCD_LED8_LEDOff()

{
	
		#if( LED_11__LED_POLE == 1)									//Active high polarity
			FC_CAL_Bit_Low_DDR( LED_11__LED_PORT	, LED_11__LED_TRIS , LED_11__LED_PIN );
007A  1683  	BSF STATUS, RP0
007B  1303  	BCF STATUS, RP1
007C  1007  	BCF gbl_trisc,0
007D  1283  	BCF STATUS, RP0
007E  1007  	BCF gbl_portc,0

		#else													//Active low polarity
			FC_CAL_Bit_High_DDR( LED_11__LED_PORT , LED_11__LED_TRIS , LED_11__LED_PIN );
		#endif

}
007F  0008  	RETURN




//LED(9): //Macro implementations


void FCD_LED9_LEDOn()

{
	
		#if( LED_12__LED_POLE == 1)									//Active high polarity
			FC_CAL_Bit_High_DDR( LED_12__LED_PORT , LED_12__LED_TRIS , LED_12__LED_PIN );
006E  1683  	BSF STATUS, RP0
006F  1303  	BCF STATUS, RP1
0070  1087  	BCF gbl_trisc,1
0071  1283  	BCF STATUS, RP0
0072  1487  	BSF gbl_portc,1

		#else													//Active low polarity
			FC_CAL_Bit_Low_DDR( LED_12__LED_PORT , LED_12__LED_TRIS , LED_12__LED_PIN );
		#endif

}
0073  0008  	RETURN


void FCD_LED9_LEDOff()

{
	
		#if( LED_12__LED_POLE == 1)									//Active high polarity
			FC_CAL_Bit_Low_DDR( LED_12__LED_PORT	, LED_12__LED_TRIS , LED_12__LED_PIN );
0074  1683  	BSF STATUS, RP0
0075  1303  	BCF STATUS, RP1
0076  1087  	BCF gbl_trisc,1
0077  1283  	BCF STATUS, RP0
0078  1087  	BCF gbl_portc,1

		#else													//Active low polarity
			FC_CAL_Bit_High_DDR( LED_12__LED_PORT , LED_12__LED_TRIS , LED_12__LED_PIN );
		#endif

}
0079  0008  	RETURN




//led7seg(0): //Macro implementations


void FCD_led7seg0_ShowDigit(MX_UINT8 Value, MX_UINT8 DecimalPoint)

{
	
		MX_UINT8 cSegmentValue = SEVENSEG1_19_SegmentArray[Value % 10];
010D  0844  	MOVF gbl_SEVENSEG1_19_SegmentArray, W
010E  00CA  	MOVWF __rom_get_00000_arg_objNumb
010F  0845  	MOVF FCD_led7se_00067_arg_Value, W
0110  00C8  	MOVWF __rem_8_8_00000_arg_a
0111  300A  	MOVLW 0x0A
0112  00C9  	MOVWF __rem_8_8_00000_arg_b
0113  205D  	CALL __rem_8_8_00000
0114  084E  	MOVF CompTempVarRet220, W
0115  00CB  	MOVWF __rom_get_00000_arg_idx
0116  2038  	CALL __rom_get_00000
0117  00C7  	MOVWF FCD_led7se_00067_1_cSegmentValue


		if (DecimalPoint)
0118  08C6  	MOVF FCD_led7se_00067_arg_Decim_00068, F
0119  118A  	BCF PCLATH,3
011A  120A  	BCF PCLATH,4
011B  1903  	BTFSC STATUS,Z
011C  2920  	GOTO	label7
0120        label7

			cSegmentValue = cSegmentValue & 0x7F;			//Clear decimal point bit
011D  307F  	MOVLW 0x7F
011E  0547  	ANDWF FCD_led7se_00067_1_cSegmentValue, W
011F  00C7  	MOVWF FCD_led7se_00067_1_cSegmentValue


		//display the digit
	    #if (SEVENSEG1_19_COM_TYPE == 1)						//Common Anode - Low = on, High = off

			if (cSegmentValue & 0x01)
0120  1C47  	BTFSS FCD_led7se_00067_1_cSegmentValue,0
0121  2927  	GOTO	label8
0127        label8

			{
				FC_CAL_Bit_High_DDR(SEVENSEG1_19_SEG_PORT, SEVENSEG1_19_SEG_TRIS, SEVENSEG1_19_SEG_PIN0);
0122  1683  	BSF STATUS, RP0
0123  1008  	BCF gbl_trisd,0
0124  1283  	BCF STATUS, RP0
0125  1408  	BSF gbl_portd,0

			}
			else
0126  292B  	GOTO	label9
012B        label9

			{
				FC_CAL_Bit_Low_DDR(SEVENSEG1_19_SEG_PORT, SEVENSEG1_19_SEG_TRIS, SEVENSEG1_19_SEG_PIN0);
0127  1683  	BSF STATUS, RP0
0128  1008  	BCF gbl_trisd,0
0129  1283  	BCF STATUS, RP0
012A  1008  	BCF gbl_portd,0

			}

			if (cSegmentValue & 0x02)
012B  1CC7  	BTFSS FCD_led7se_00067_1_cSegmentValue,1
012C  2932  	GOTO	label10
0132        label10

			{
				FC_CAL_Bit_High_DDR(SEVENSEG1_19_SEG_PORT, SEVENSEG1_19_SEG_TRIS, SEVENSEG1_19_SEG_PIN1);
012D  1683  	BSF STATUS, RP0
012E  1088  	BCF gbl_trisd,1
012F  1283  	BCF STATUS, RP0
0130  1488  	BSF gbl_portd,1

			}
			else
0131  2936  	GOTO	label11
0136        label11

			{
				FC_CAL_Bit_Low_DDR(SEVENSEG1_19_SEG_PORT, SEVENSEG1_19_SEG_TRIS, SEVENSEG1_19_SEG_PIN1);
0132  1683  	BSF STATUS, RP0
0133  1088  	BCF gbl_trisd,1
0134  1283  	BCF STATUS, RP0
0135  1088  	BCF gbl_portd,1

			}

			if (cSegmentValue & 0x04)
0136  1D47  	BTFSS FCD_led7se_00067_1_cSegmentValue,2
0137  293D  	GOTO	label12
013D        label12

			{
				FC_CAL_Bit_High_DDR(SEVENSEG1_19_SEG_PORT, SEVENSEG1_19_SEG_TRIS, SEVENSEG1_19_SEG_PIN2);
0138  1683  	BSF STATUS, RP0
0139  1108  	BCF gbl_trisd,2
013A  1283  	BCF STATUS, RP0
013B  1508  	BSF gbl_portd,2

			}
			else
013C  2941  	GOTO	label13
0141        label13

			{
				FC_CAL_Bit_Low_DDR(SEVENSEG1_19_SEG_PORT, SEVENSEG1_19_SEG_TRIS, SEVENSEG1_19_SEG_PIN2);
013D  1683  	BSF STATUS, RP0
013E  1108  	BCF gbl_trisd,2
013F  1283  	BCF STATUS, RP0
0140  1108  	BCF gbl_portd,2

			}

			if (cSegmentValue & 0x08)
0141  1DC7  	BTFSS FCD_led7se_00067_1_cSegmentValue,3
0142  2948  	GOTO	label14
0148        label14

			{
				FC_CAL_Bit_High_DDR(SEVENSEG1_19_SEG_PORT, SEVENSEG1_19_SEG_TRIS, SEVENSEG1_19_SEG_PIN3);
0143  1683  	BSF STATUS, RP0
0144  1188  	BCF gbl_trisd,3
0145  1283  	BCF STATUS, RP0
0146  1588  	BSF gbl_portd,3

			}
			else
0147  294C  	GOTO	label15
014C        label15

			{
				FC_CAL_Bit_Low_DDR(SEVENSEG1_19_SEG_PORT, SEVENSEG1_19_SEG_TRIS, SEVENSEG1_19_SEG_PIN3);
0148  1683  	BSF STATUS, RP0
0149  1188  	BCF gbl_trisd,3
014A  1283  	BCF STATUS, RP0
014B  1188  	BCF gbl_portd,3

			}

			if (cSegmentValue & 0x10)
014C  1E47  	BTFSS FCD_led7se_00067_1_cSegmentValue,4
014D  2953  	GOTO	label16
0153        label16

			{
				FC_CAL_Bit_High_DDR(SEVENSEG1_19_SEG_PORT, SEVENSEG1_19_SEG_TRIS, SEVENSEG1_19_SEG_PIN4);
014E  1683  	BSF STATUS, RP0
014F  1208  	BCF gbl_trisd,4
0150  1283  	BCF STATUS, RP0
0151  1608  	BSF gbl_portd,4

			}
			else
0152  2957  	GOTO	label17
0157        label17

			{
				FC_CAL_Bit_Low_DDR(SEVENSEG1_19_SEG_PORT, SEVENSEG1_19_SEG_TRIS, SEVENSEG1_19_SEG_PIN4);
0153  1683  	BSF STATUS, RP0
0154  1208  	BCF gbl_trisd,4
0155  1283  	BCF STATUS, RP0
0156  1208  	BCF gbl_portd,4

			}

			if (cSegmentValue & 0x20)
0157  1EC7  	BTFSS FCD_led7se_00067_1_cSegmentValue,5
0158  295E  	GOTO	label18
015E        label18

			{
				FC_CAL_Bit_High_DDR(SEVENSEG1_19_SEG_PORT, SEVENSEG1_19_SEG_TRIS, SEVENSEG1_19_SEG_PIN5);
0159  1683  	BSF STATUS, RP0
015A  1288  	BCF gbl_trisd,5
015B  1283  	BCF STATUS, RP0
015C  1688  	BSF gbl_portd,5

			}
			else
015D  2962  	GOTO	label19
0162        label19

			{
				FC_CAL_Bit_Low_DDR(SEVENSEG1_19_SEG_PORT, SEVENSEG1_19_SEG_TRIS, SEVENSEG1_19_SEG_PIN5);
015E  1683  	BSF STATUS, RP0
015F  1288  	BCF gbl_trisd,5
0160  1283  	BCF STATUS, RP0
0161  1288  	BCF gbl_portd,5

			}

			if (cSegmentValue & 0x40)
0162  1F47  	BTFSS FCD_led7se_00067_1_cSegmentValue,6
0163  2969  	GOTO	label20
0169        label20

			{
				FC_CAL_Bit_High_DDR(SEVENSEG1_19_SEG_PORT, SEVENSEG1_19_SEG_TRIS, SEVENSEG1_19_SEG_PIN6);
0164  1683  	BSF STATUS, RP0
0165  1308  	BCF gbl_trisd,6
0166  1283  	BCF STATUS, RP0
0167  1708  	BSF gbl_portd,6

			}
			else
0168  296D  	GOTO	label21
016D        label21

			{
				FC_CAL_Bit_Low_DDR(SEVENSEG1_19_SEG_PORT, SEVENSEG1_19_SEG_TRIS, SEVENSEG1_19_SEG_PIN6);
0169  1683  	BSF STATUS, RP0
016A  1308  	BCF gbl_trisd,6
016B  1283  	BCF STATUS, RP0
016C  1308  	BCF gbl_portd,6

			}

			if (cSegmentValue & 0x80)
016D  1FC7  	BTFSS FCD_led7se_00067_1_cSegmentValue,7
016E  2974  	GOTO	label22
0174        label22

			{
				FC_CAL_Bit_High_DDR(SEVENSEG1_19_SEG_PORT, SEVENSEG1_19_SEG_TRIS, SEVENSEG1_19_SEG_PIN7);
016F  1683  	BSF STATUS, RP0
0170  1388  	BCF gbl_trisd,7
0171  1283  	BCF STATUS, RP0
0172  1788  	BSF gbl_portd,7

			}
			else
0173  2978  	GOTO	label23
0178        label23

			{
				FC_CAL_Bit_Low_DDR(SEVENSEG1_19_SEG_PORT, SEVENSEG1_19_SEG_TRIS, SEVENSEG1_19_SEG_PIN7);
0174  1683  	BSF STATUS, RP0
0175  1388  	BCF gbl_trisd,7
0176  1283  	BCF STATUS, RP0
0177  1388  	BCF gbl_portd,7

			}

			FC_CAL_Bit_High_DDR(SEVENSEG1_19_COM_PORT, SEVENSEG1_19_COM_TRIS, SEVENSEG1_19_COM_PIN);
0178  1683  	BSF STATUS, RP0
0179  1107  	BCF gbl_trisc,2
017A  1283  	BCF STATUS, RP0
017B  1507  	BSF gbl_portc,2


		#else												//Common Cathode - Low = off, High = on

			if (cSegmentValue & 0x01)
			{
				FC_CAL_Bit_Low_DDR(SEVENSEG1_19_SEG_PORT, SEVENSEG1_19_SEG_TRIS, SEVENSEG1_19_SEG_PIN0);
			}
			else
			{
				FC_CAL_Bit_High_DDR(SEVENSEG1_19_SEG_PORT, SEVENSEG1_19_SEG_TRIS, SEVENSEG1_19_SEG_PIN0);
			}

			if (cSegmentValue & 0x02)
			{
				FC_CAL_Bit_Low_DDR(SEVENSEG1_19_SEG_PORT, SEVENSEG1_19_SEG_TRIS, SEVENSEG1_19_SEG_PIN1);
			}
			else
			{
				FC_CAL_Bit_High_DDR(SEVENSEG1_19_SEG_PORT, SEVENSEG1_19_SEG_TRIS, SEVENSEG1_19_SEG_PIN1);
			}

			if (cSegmentValue & 0x04)
			{
				FC_CAL_Bit_Low_DDR(SEVENSEG1_19_SEG_PORT, SEVENSEG1_19_SEG_TRIS, SEVENSEG1_19_SEG_PIN2);
			}
			else
			{
				FC_CAL_Bit_High_DDR(SEVENSEG1_19_SEG_PORT, SEVENSEG1_19_SEG_TRIS, SEVENSEG1_19_SEG_PIN2);
			}

			if (cSegmentValue & 0x08)
			{
				FC_CAL_Bit_Low_DDR(SEVENSEG1_19_SEG_PORT, SEVENSEG1_19_SEG_TRIS, SEVENSEG1_19_SEG_PIN3);
			}
			else
			{
				FC_CAL_Bit_High_DDR(SEVENSEG1_19_SEG_PORT, SEVENSEG1_19_SEG_TRIS, SEVENSEG1_19_SEG_PIN3);
			}

			if (cSegmentValue & 0x10)
			{
				FC_CAL_Bit_Low_DDR(SEVENSEG1_19_SEG_PORT, SEVENSEG1_19_SEG_TRIS, SEVENSEG1_19_SEG_PIN4);
			}
			else
			{
				FC_CAL_Bit_High_DDR(SEVENSEG1_19_SEG_PORT, SEVENSEG1_19_SEG_TRIS, SEVENSEG1_19_SEG_PIN4);
			}

			if (cSegmentValue & 0x20)
			{
				FC_CAL_Bit_Low_DDR(SEVENSEG1_19_SEG_PORT, SEVENSEG1_19_SEG_TRIS, SEVENSEG1_19_SEG_PIN5);
			}
			else
			{
				FC_CAL_Bit_High_DDR(SEVENSEG1_19_SEG_PORT, SEVENSEG1_19_SEG_TRIS, SEVENSEG1_19_SEG_PIN5);
			}

			if (cSegmentValue & 0x40)
			{
				FC_CAL_Bit_Low_DDR(SEVENSEG1_19_SEG_PORT, SEVENSEG1_19_SEG_TRIS, SEVENSEG1_19_SEG_PIN6);
			}
			else
			{
				FC_CAL_Bit_High_DDR(SEVENSEG1_19_SEG_PORT, SEVENSEG1_19_SEG_TRIS, SEVENSEG1_19_SEG_PIN6);
			}

			if (cSegmentValue & 0x80)
			{
				FC_CAL_Bit_Low_DDR(SEVENSEG1_19_SEG_PORT, SEVENSEG1_19_SEG_TRIS, SEVENSEG1_19_SEG_PIN7);
			}
			else
			{
				FC_CAL_Bit_High_DDR(SEVENSEG1_19_SEG_PORT, SEVENSEG1_19_SEG_TRIS, SEVENSEG1_19_SEG_PIN7);
			}

			FC_CAL_Bit_Low_DDR(SEVENSEG1_19_COM_PORT, SEVENSEG1_19_COM_TRIS, SEVENSEG1_19_COM_PIN);

		#endif

}
017C  0008  	RETURN


void FCD_led7seg0_ClearDigit()

{
	
		#if (SEVENSEG1_19_COM_TYPE == 1)
			FC_CAL_Bit_Low_DDR(SEVENSEG1_19_COM_PORT, SEVENSEG1_19_COM_TRIS, SEVENSEG1_19_COM_PIN);		//common anode
0107  1683  	BSF STATUS, RP0
0108  1303  	BCF STATUS, RP1
0109  1107  	BCF gbl_trisc,2
010A  1283  	BCF STATUS, RP0
010B  1107  	BCF gbl_portc,2

		#else
			FC_CAL_Bit_High_DDR(SEVENSEG1_19_COM_PORT, SEVENSEG1_19_COM_TRIS, SEVENSEG1_19_COM_PIN);		//common cathode
		#endif

}
010C  0008  	RETURN


#include "C:\Program Files\Flowcode\v5\CAL\includes.c"

//Macro implementations


void FCM_safety()

{

	//Call Component Macro
	//Call Component Macro: LEDOff()
	FCD_LED0_LEDOff();
00F1  20E0  	CALL FCD_LED0_L_00051


	//Call Component Macro
	//Call Component Macro: LEDOn()
	FCD_LED1_LEDOn();
00F2  20D4  	CALL FCD_LED1_L_00052


	//Call Component Macro
	//Call Component Macro: LEDOff()
	FCD_LED2_LEDOff();
00F3  20C8  	CALL FCD_LED2_L_00053


	//Call Component Macro
	//Call Component Macro: LEDOn()
	FCD_LED3_LEDOn();
00F4  20BC  	CALL FCD_LED3_L_00054


	//Call Component Macro
	//Call Component Macro: LEDOff()
	FCD_LED4_LEDOff();
00F5  20B0  	CALL FCD_LED4_L_00055


	//Call Component Macro
	//Call Component Macro: LEDOn()
	FCD_LED5_LEDOn();
00F6  20A4  	CALL FCD_LED5_L_00056


	//Call Component Macro
	//Call Component Macro: LEDOff()
	FCD_LED6_LEDOff();
00F7  2098  	CALL FCD_LED6_L_00057


	//Call Component Macro
	//Call Component Macro: LEDOff()
	FCD_LED7_LEDOff();
00F8  208C  	CALL FCD_LED7_L_00058


	//Call Component Macro
	//Call Component Macro: LEDOn()
	FCD_LED8_LEDOn();
00F9  2080  	CALL FCD_LED8_L_00059


	//Call Component Macro
	//Call Component Macro: LEDOff()
	FCD_LED9_LEDOff();
00FA  2074  	CALL FCD_LED9_L_0005A


}
00FB  0008  	RETURN



void FCM_vehicles_moving()

{

	//Call Component Macro
	//Call Component Macro: LEDOff()
	FCD_LED0_LEDOff();
00E6  20E0  	CALL FCD_LED0_L_00051


	//Call Component Macro
	//Call Component Macro: LEDOff()
	FCD_LED1_LEDOff();
00E7  20CE  	CALL FCD_LED1_L_0005C


	//Call Component Macro
	//Call Component Macro: LEDOn()
	FCD_LED2_LEDOn();
00E8  20C2  	CALL FCD_LED2_L_0005D


	//Call Component Macro
	//Call Component Macro: LEDOn()
	FCD_LED3_LEDOn();
00E9  20BC  	CALL FCD_LED3_L_00054


	//Call Component Macro
	//Call Component Macro: LEDOff()
	FCD_LED4_LEDOff();
00EA  20B0  	CALL FCD_LED4_L_00055


	//Call Component Macro
	//Call Component Macro: LEDOn()
	FCD_LED5_LEDOn();
00EB  20A4  	CALL FCD_LED5_L_00056


	//Call Component Macro
	//Call Component Macro: LEDOff()
	FCD_LED6_LEDOff();
00EC  2098  	CALL FCD_LED6_L_00057


	//Call Component Macro
	//Call Component Macro: LEDOff()
	FCD_LED7_LEDOff();
00ED  208C  	CALL FCD_LED7_L_00058


	//Call Component Macro
	//Call Component Macro: LEDOff()
	FCD_LED8_LEDOff();
00EE  207A  	CALL FCD_LED8_L_0005E


	//Call Component Macro
	//Call Component Macro: LEDOn()
	FCD_LED9_LEDOn();
00EF  206E  	CALL FCD_LED9_L_0005F


}
00F0  0008  	RETURN



void FCM_pedestrian_crossing()

{

	//Call Component Macro
	//Call Component Macro: LEDOn()
	FCD_LED0_LEDOn();
00FC  20DA  	CALL FCD_LED0_L_00061


	//Call Component Macro
	//Call Component Macro: LEDOff()
	FCD_LED1_LEDOff();
00FD  20CE  	CALL FCD_LED1_L_0005C


	//Call Component Macro
	//Call Component Macro: LEDOff()
	FCD_LED2_LEDOff();
00FE  20C8  	CALL FCD_LED2_L_00053


	//Call Component Macro
	//Call Component Macro: LEDOff()
	FCD_LED3_LEDOff();
00FF  20B6  	CALL FCD_LED3_L_00062


	//Call Component Macro
	//Call Component Macro: LEDOn()
	FCD_LED4_LEDOn();
0100  20AA  	CALL FCD_LED4_L_00063


	//Call Component Macro
	//Call Component Macro: LEDOff()
	FCD_LED5_LEDOff();
0101  209E  	CALL FCD_LED5_L_00064


	//Call Component Macro
	//Call Component Macro: LEDOn()
	FCD_LED6_LEDOn();
0102  2092  	CALL FCD_LED6_L_00065


	//Call Component Macro
	//Call Component Macro: LEDOn()
	FCD_LED7_LEDOn();
0103  2086  	CALL FCD_LED7_L_00066


	//Call Component Macro
	//Call Component Macro: LEDOff()
	FCD_LED8_LEDOff();
0104  207A  	CALL FCD_LED8_L_0005E


	//Call Component Macro
	//Call Component Macro: LEDOff()
	FCD_LED9_LEDOff();
0105  2074  	CALL FCD_LED9_L_0005A


}
0106  0008  	RETURN




void main()

{
	//Initialization
	adcon1 = 0x07;
017D  3007  	MOVLW 0x07
017E  1683  	BSF STATUS, RP0
017F  1303  	BCF STATUS, RP1
0180  009F  	MOVWF gbl_adcon1



	//Interrupt initialization code
	option_reg = 0xC0;
0181  30C0  	MOVLW 0xC0
0182  0081  	MOVWF gbl_option_reg



	//Loop
	//Loop: While 1
	while (1)
0183        label24
01C5  2983  	GOTO	label24

	{

		//Call Macro
		//Call Macro: 
		//No code generated because there is no macro name

		//Call Macro
		//Call Macro: vehicles_moving()
		FCM_vehicles_moving();
0183  20E6  	CALL FCM_vehicl_0005B


		//Input
		//Input: A0 -> switch_state
		trisa = trisa | 0x01;
0184  3001  	MOVLW 0x01
0185  1683  	BSF STATUS, RP0
0186  0405  	IORWF gbl_trisa, W
0187  0085  	MOVWF gbl_trisa

		FCV_SWITCH_STATE = ((porta & 0x01) == 0x01);
0188  3001  	MOVLW 0x01
0189  1283  	BCF STATUS, RP0
018A  0505  	ANDWF gbl_porta, W
018B  00C5  	MOVWF CompTempVar2188
018C  01C6  	CLRF CompTempVar2189
018D  0345  	DECF CompTempVar2188, W
018E  1903  	BTFSC STATUS,Z
018F  0AC6  	INCF CompTempVar2189, F
0190  10C3  	BCF gbl_FCV_SWITCH_STATE,1
0191  0846  	MOVF CompTempVar2189, W
0192  1D03  	BTFSS STATUS,Z
0193  14C3  	BSF gbl_FCV_SWITCH_STATE,1


		//Input
		//Input: A1 -> switch2_state
		trisa = trisa | 0x02;
0194  3002  	MOVLW 0x02
0195  1683  	BSF STATUS, RP0
0196  0405  	IORWF gbl_trisa, W
0197  0085  	MOVWF gbl_trisa

		FCV_SWITCH2_STATE = ((porta & 0x02) == 0x02);
0198  3002  	MOVLW 0x02
0199  1283  	BCF STATUS, RP0
019A  0505  	ANDWF gbl_porta, W
019B  00C5  	MOVWF CompTempVar2190
019C  01C6  	CLRF CompTempVar2191
019D  3002  	MOVLW 0x02
019E  0245  	SUBWF CompTempVar2190, W
019F  1903  	BTFSC STATUS,Z
01A0  0AC6  	INCF CompTempVar2191, F
01A1  1043  	BCF gbl_FCV_SWITCH2_STATE,0
01A2  0846  	MOVF CompTempVar2191, W
01A3  1D03  	BTFSS STATUS,Z
01A4  1443  	BSF gbl_FCV_SWITCH2_STATE,0


		//Call Component Macro
		//Call Component Macro: ClearDigit()
		FCD_led7seg0_ClearDigit();
01A5  2107  	CALL FCD_led7se_00069


		//Decision
		//Decision: switch_state = 1 || switch2_state = 1?
		if (FCV_SWITCH_STATE == 1 || FCV_SWITCH2_STATE == 1)
01A6  18C3  	BTFSC gbl_FCV_SWITCH_STATE,1
01A7  29AA  	GOTO	label25
01A8  1C43  	BTFSS gbl_FCV_SWITCH2_STATE,0
01A9  29C4  	GOTO	label28
01AA        label25
01C4        label28

		{

			//Call Macro
			//Call Macro: safety()
			FCM_safety();
01AA  20F1  	CALL FCM_safety_00000


			//Delay
			//Delay: 5 s
			delay_s(5);
01AB  3005  	MOVLW 0x05
01AC  00C5  	MOVWF delay_s_00000_arg_del
01AD  204E  	CALL delay_s_00000


			//Call Macro
			//Call Macro: pedestrian_crossing()
			FCM_pedestrian_crossing();
01AE  20FC  	CALL FCM_pedest_00060


			//Loop
			//Loop: While counter < 10
			while (FCV_COUNTER < 10)
01AF        label26
01AF  300A  	MOVLW 0x0A
01B0  0242  	SUBWF gbl_FCV_COUNTER, W
01B1  1803  	BTFSC STATUS,C
01B2  29BD  	GOTO	label27
01BC  29AF  	GOTO	label26
01BD        label27

			{

				//Call Component Macro
				//Call Component Macro: ShowDigit(counter, false)
				FCD_led7seg0_ShowDigit(FCV_COUNTER, FCV_FALSE);
01B3  0842  	MOVF gbl_FCV_COUNTER, W
01B4  00C5  	MOVWF FCD_led7se_00067_arg_Value
01B5  01C6  	CLRF FCD_led7se_00067_arg_Decim_00068
01B6  210D  	CALL FCD_led7se_00067


				//Delay
				//Delay: 1 s
				delay_s(1);
01B7  3001  	MOVLW 0x01
01B8  00C5  	MOVWF delay_s_00000_arg_del
01B9  204E  	CALL delay_s_00000


				//
				//Calculation:
				//  counter = counter + 1
				FCV_COUNTER = FCV_COUNTER + 1;
01BA  0A42  	INCF gbl_FCV_COUNTER, W
01BB  00C2  	MOVWF gbl_FCV_COUNTER



			}

			//Call Component Macro
			//Call Component Macro: ClearDigit()
			FCD_led7seg0_ClearDigit();
01BD  2107  	CALL FCD_led7se_00069


			//Call Macro
			//Call Macro: safety()
			FCM_safety();
01BE  20F1  	CALL FCM_safety_00000


			//Delay
			//Delay: 5 s
			delay_s(5);
01BF  3005  	MOVLW 0x05
01C0  00C5  	MOVWF delay_s_00000_arg_del
01C1  204E  	CALL delay_s_00000


			//Call Macro
			//Call Macro: vehicles_moving()
			FCM_vehicles_moving();
01C2  20E6  	CALL FCM_vehicl_0005B


		} else {
01C3  2983  	GOTO	label24


			//Call Macro
			//Call Macro: vehicles_moving()
			FCM_vehicles_moving();
01C4  20E6  	CALL FCM_vehicl_0005B


		}


	}

	mainendloop: goto mainendloop;
}


void MX_INTERRUPT_MACRO(void)

{
}
01F3  1283  	BCF STATUS, RP0
01F4  1303  	BCF STATUS, RP1
01F5  0E36  	SWAPF Int1BContext+D'2', W
01F6  0084  	MOVWF FSR
01F7  0E35  	SWAPF Int1BContext+D'1', W
01F8  008A  	MOVWF PCLATH
01F9  0E34  	SWAPF Int1BContext, W
01FA  0083  	MOVWF STATUS
01FB  0EFF  	SWAPF Int1Context, F
01FC  0E7F  	SWAPF Int1Context, W
01FD  0009  	RETFIE





////////////////////////////////////////
// Code with no source :-)
////////////////////////////////////////
0000  29C6  	GOTO	_startup

0004  00FF  	MOVWF Int1Context
0005  0E03  	SWAPF STATUS, W
0006  1283  	BCF STATUS, RP0
0007  1303  	BCF STATUS, RP1
0008  00B4  	MOVWF Int1BContext
0009  0E0A  	SWAPF PCLATH, W
000A  00B5  	MOVWF Int1BContext+D'1'
000B  0E04  	SWAPF FSR, W
000C  00B6  	MOVWF Int1BContext+D'2'
000D  118A  	BCF PCLATH,3
000E  120A  	BCF PCLATH,4
000F  29F3  	GOTO	interrupt
0010        delay_ms_00000
0010        ; { delay_ms ; function begin
0010  08C6  	MOVF delay_ms_00000_arg_del, F
0011  1D03  	BTFSS STATUS,Z
0012  2814  	GOTO	label1
0013  0008  	RETURN
0014        label1
0014  30F5  	MOVLW 0xF5
0015        label2
0015  0000  	NOP
0016  0000  	NOP
0017  0000  	NOP
0018  0000  	NOP
0019  0000  	NOP
001A  0000  	NOP
001B  0000  	NOP
001C  0000  	NOP
001D  0000  	NOP
001E  0000  	NOP
001F  0000  	NOP
0020  0000  	NOP
0021  0000  	NOP
0022  0000  	NOP
0023  0000  	NOP
0024  0000  	NOP
0025  3EFF  	ADDLW 0xFF
0026  1D03  	BTFSS STATUS,Z
0027  2815  	GOTO	label2
0028  0000  	NOP
0029  0000  	NOP
002A  0000  	NOP
002B  0000  	NOP
002C  0000  	NOP
002D  0000  	NOP
002E  0000  	NOP
002F  0000  	NOP
0030  0000  	NOP
0031  0000  	NOP
0032  0000  	NOP
0033  0000  	NOP
0034  0000  	NOP
0035  0BC6  	DECFSZ delay_ms_00000_arg_del, F
0036  2814  	GOTO	label1
0037  0008  	RETURN
0038        ; } delay_ms function end

0038        __rom_get_00000
0038        ; { __rom_get ; function begin
0038  084B  	MOVF __rom_get_00000_arg_idx, W
0039  00CC  	MOVWF __rom_get_00000_1_romAddr
003A  3000  	MOVLW	HIGH( label3 )
003B  00CD  	MOVWF __rom_get_00000_1_romAddr+D'1'
003C  3044  	MOVLW	LOW( label3 )
003D  07CC  	ADDWF __rom_get_00000_1_romAddr, F
003E  1803  	BTFSC STATUS,C
003F  0ACD  	INCF __rom_get_00000_1_romAddr+D'1', F
0040  084D  	MOVF __rom_get_00000_1_romAddr+D'1', W
0041  008A  	MOVWF PCLATH
0042  084C  	MOVF __rom_get_00000_1_romAddr, W
0043  0082  	MOVWF PCL
0044        label3
0044  34C0  	RETLW 0xC0
0045  34F9  	RETLW 0xF9
0046  34A4  	RETLW 0xA4
0047  34B0  	RETLW 0xB0
0048  3499  	RETLW 0x99
0049  3492  	RETLW 0x92
004A  3482  	RETLW 0x82
004B  34F8  	RETLW 0xF8
004C  3480  	RETLW 0x80
004D  3498  	RETLW 0x98
004E        ; } __rom_get function end

004E        delay_s_00000
004E        ; { delay_s ; function begin
004E        label4
004E  30FA  	MOVLW 0xFA
004F  00C6  	MOVWF delay_ms_00000_arg_del
0050  2010  	CALL delay_ms_00000
0051  30FA  	MOVLW 0xFA
0052  00C6  	MOVWF delay_ms_00000_arg_del
0053  2010  	CALL delay_ms_00000
0054  30FA  	MOVLW 0xFA
0055  00C6  	MOVWF delay_ms_00000_arg_del
0056  2010  	CALL delay_ms_00000
0057  30FA  	MOVLW 0xFA
0058  00C6  	MOVWF delay_ms_00000_arg_del
0059  2010  	CALL delay_ms_00000
005A  0BC5  	DECFSZ delay_s_00000_arg_del, F
005B  284E  	GOTO	label4
005C  0008  	RETURN
005D        ; } delay_s function end

005D        __rem_8_8_00000
005D        ; { __rem_8_8 ; function begin
005D  01CE  	CLRF CompTempVarRet220
005E  01CC  	CLRF __rem_8_8_00000_1_c
005F  01CD  	CLRF __rem_8_8_00000_1_i
0060        label5
0060  19CD  	BTFSC __rem_8_8_00000_1_i,3
0061  0008  	RETURN
0062  1003  	BCF STATUS,C
0063  0DCC  	RLF __rem_8_8_00000_1_c, F
0064  0DC8  	RLF __rem_8_8_00000_arg_a, F
0065  0DCE  	RLF CompTempVarRet220, F
0066  0849  	MOVF __rem_8_8_00000_arg_b, W
0067  024E  	SUBWF CompTempVarRet220, W
0068  1C03  	BTFSS STATUS,C
0069  286C  	GOTO	label6
006A  00CE  	MOVWF CompTempVarRet220
006B  144C  	BSF __rem_8_8_00000_1_c,0
006C        label6
006C  0ACD  	INCF __rem_8_8_00000_1_i, F
006D  2860  	GOTO	label5
006E        ; } __rem_8_8 function end


01C6        _startup
01C6  30D5  	MOVLW 0xD5
01C7  1283  	BCF STATUS, RP0
01C8  1303  	BCF STATUS, RP1
01C9  00A0  	MOVWF gbl_14_LSR
01CA  30C4  	MOVLW 0xC4
01CB  00A1  	MOVWF gbl_14_LSR+D'1'
01CC  30BB  	MOVLW 0xBB
01CD  00A2  	MOVWF gbl_14_LSR+D'2'
01CE  30DC  	MOVLW 0xDC
01CF  00A3  	MOVWF gbl_14_LSR+D'3'
01D0  01A4  	CLRF gbl_15_gbl_aSig
01D1  01A5  	CLRF gbl_15_gbl_aSig+D'1'
01D2  01A6  	CLRF gbl_15_gbl_aSig+D'2'
01D3  01A7  	CLRF gbl_15_gbl_aSig+D'3'
01D4  01A8  	CLRF gbl_15_gbl_bSig
01D5  01A9  	CLRF gbl_15_gbl_bSig+D'1'
01D6  01AA  	CLRF gbl_15_gbl_bSig+D'2'
01D7  01AB  	CLRF gbl_15_gbl_bSig+D'3'
01D8  01AC  	CLRF gbl_15_gbl_zSig
01D9  01AD  	CLRF gbl_15_gbl_zSig+D'1'
01DA  01AE  	CLRF gbl_15_gbl_zSig+D'2'
01DB  01AF  	CLRF gbl_15_gbl_zSig+D'3'
01DC  01BC  	CLRF gbl_15_gbl_aExp
01DD  01BD  	CLRF gbl_15_gbl_bExp
01DE  01B7  	CLRF gbl_15_gbl_zExp
01DF  01B8  	CLRF gbl_15_gbl_zExp+D'1'
01E0  01BE  	CLRF gbl_15_gbl_aSign
01E1  01BF  	CLRF gbl_15_gbl_bSign
01E2  01C0  	CLRF gbl_15_gbl_zSign
01E3  01C1  	CLRF gbl_15_gbl_zSigZero
01E4  01B0  	CLRF gbl_15_gbl_ret
01E5  01B1  	CLRF gbl_15_gbl_ret+D'1'
01E6  01B2  	CLRF gbl_15_gbl_ret+D'2'
01E7  01B3  	CLRF gbl_15_gbl_ret+D'3'
01E8  01BA  	CLRF gbl_float_rounding_mode
01E9  01BB  	CLRF gbl_float_exception_flags
01EA  01B9  	CLRF gbl_float_detect_tininess

01F0  118A  	BCF PCLATH,3
01F1  120A  	BCF PCLATH,4
01F2  297D  	GOTO	main

2007  3F72  	DW 0x3F72
